import { stringify } from "yaml";
import { RequestContext } from '../utils/types/internal/request';
import { showSuccess, showError } from "../controller/local/ErrorNotifyController";
import { popActions, dumpEditActions } from "../utils/schema/injectActions";
import { actionNames2URLQuery } from "../utils/actionUtils";
import { sendRequest, authFailed } from "../utils/AuthedRequest";
import { Nullable } from "../utils/types/typeUtils";


export async function createNewEntity(
  name: Nullable<string>,
  data: any,
  requestContext: RequestContext,
  yaml?: string
): Promise<boolean> {
  const editActions = popActions(data, requestContext);

  const content = JSON.stringify(yaml) ??
    JSON.stringify(`---\n# Automatically generated by VAYS\n\n${stringify(data)}`);

  const stringName: string = name == null ? 'null' : `\"${name}\"`;
  const resp = await sendRequest(
    requestContext.yacURL +
    `/entity/${requestContext.entityTypeName}${actionNames2URLQuery(
      dumpEditActions(editActions)
    )}`,
    'POST',
    `{"name": ${stringName}, "yaml":${content}}`
  );

  // Network error
  if (resp == null) {
    return false;
  }

  if (resp.status == 201) {
    showSuccess(
      `Created ${name} successfully!`,
      'The entity was successfully created and added to the repository.'
    );
    return true;
  } else if (resp.status == 422) {
    showError(
      'Frontend Error',
      'Invalid specification used, cannot talk to YAC servers. Please report ID-NEW-SD-01.'
    );
  } else if (resp.status >= 500) {
    const ans = await resp.json();
    showError(
      `${requestContext.backendObject?.title}: ` +
      (ans.title ?? `Cannot create ${name} (Status ${resp.status})`),
      (ans.message ?? 'Please contact your admin on this issue. ') +
      'The data you entered is cached for now.'
    );
  } else if (authFailed(resp.status)) {
    // TODO
  } else if (resp.status >= 400) {
    const jresp = await resp.json();
    showError(`Client Error (Status ${resp.status})`, jresp['detail']);
  }

  return false;
}
